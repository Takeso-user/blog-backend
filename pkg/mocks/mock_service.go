// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pkg "github.com/Takeso-user/blog-backend/pkg"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockPostRepositoryInterface is a mock of PostRepositoryInterface interface.
type MockPostRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryInterfaceMockRecorder
}

// MockPostRepositoryInterfaceMockRecorder is the mock recorder for MockPostRepositoryInterface.
type MockPostRepositoryInterfaceMockRecorder struct {
	mock *MockPostRepositoryInterface
}

// NewMockPostRepositoryInterface creates a new mock instance.
func NewMockPostRepositoryInterface(ctrl *gomock.Controller) *MockPostRepositoryInterface {
	mock := &MockPostRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepositoryInterface) EXPECT() *MockPostRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostRepositoryInterface) CreatePost(post pkg.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostRepositoryInterfaceMockRecorder) CreatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).CreatePost), post)
}

// DeletePost mocks base method.
func (m *MockPostRepositoryInterface) DeletePost(postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepositoryInterfaceMockRecorder) DeletePost(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).DeletePost), postID)
}

// GetPostByID mocks base method.
func (m *MockPostRepositoryInterface) GetPostByID(postID string) (pkg.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", postID)
	ret0, _ := ret[0].(pkg.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostRepositoryInterfaceMockRecorder) GetPostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetPostByID), postID)
}

// GetPosts mocks base method.
func (m *MockPostRepositoryInterface) GetPosts() ([]pkg.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts")
	ret0, _ := ret[0].([]pkg.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostRepositoryInterfaceMockRecorder) GetPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetPosts))
}

// UpdatePost mocks base method.
func (m *MockPostRepositoryInterface) UpdatePost(id primitive.ObjectID, updateFields bson.M) (pkg.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", id, updateFields)
	ret0, _ := ret[0].(pkg.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostRepositoryInterfaceMockRecorder) UpdatePost(id, updateFields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).UpdatePost), id, updateFields)
}

// MockCommentRepositoryInterface is a mock of CommentRepositoryInterface interface.
type MockCommentRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryInterfaceMockRecorder
}

// MockCommentRepositoryInterfaceMockRecorder is the mock recorder for MockCommentRepositoryInterface.
type MockCommentRepositoryInterfaceMockRecorder struct {
	mock *MockCommentRepositoryInterface
}

// NewMockCommentRepositoryInterface creates a new mock instance.
func NewMockCommentRepositoryInterface(ctrl *gomock.Controller) *MockCommentRepositoryInterface {
	mock := &MockCommentRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepositoryInterface) EXPECT() *MockCommentRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockCommentRepositoryInterface) AddComment(comment pkg.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockCommentRepositoryInterfaceMockRecorder) AddComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockCommentRepositoryInterface)(nil).AddComment), comment)
}

// DeleteComment mocks base method.
func (m *MockCommentRepositoryInterface) DeleteComment(commentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentRepositoryInterfaceMockRecorder) DeleteComment(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentRepositoryInterface)(nil).DeleteComment), commentID)
}

// GetAllComment mocks base method.
func (m *MockCommentRepositoryInterface) GetAllComment() ([]pkg.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllComment")
	ret0, _ := ret[0].([]pkg.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllComment indicates an expected call of GetAllComment.
func (mr *MockCommentRepositoryInterfaceMockRecorder) GetAllComment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllComment", reflect.TypeOf((*MockCommentRepositoryInterface)(nil).GetAllComment))
}

// GetComments mocks base method.
func (m *MockCommentRepositoryInterface) GetComments(postID string) ([]pkg.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", postID)
	ret0, _ := ret[0].([]pkg.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockCommentRepositoryInterfaceMockRecorder) GetComments(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockCommentRepositoryInterface)(nil).GetComments), postID)
}

// UpdateComment mocks base method.
func (m *MockCommentRepositoryInterface) UpdateComment(ctx context.Context, filter, updateFields bson.M) (pkg.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, filter, updateFields)
	ret0, _ := ret[0].(pkg.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentRepositoryInterfaceMockRecorder) UpdateComment(ctx, filter, updateFields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentRepositoryInterface)(nil).UpdateComment), ctx, filter, updateFields)
}

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepositoryInterface) CreateUser(user pkg.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateUser), user)
}

// GetUserByID mocks base method.
func (m *MockUserRepositoryInterface) GetUserByID(userID string) (pkg.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(pkg.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserByID), userID)
}

// GetUserByUsername mocks base method.
func (m *MockUserRepositoryInterface) GetUserByUsername(username string) (pkg.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(pkg.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserByUsername), username)
}

// GetUsers mocks base method.
func (m *MockUserRepositoryInterface) GetUsers() ([]pkg.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]pkg.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUsers))
}
